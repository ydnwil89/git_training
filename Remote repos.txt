git clone {url} - создание локальной копии удаленного репозитория

<удалённый репозиторий>/<имя ветки> - нейминг для удаленных веток

git fetch - извлекает данные из удаленного репозитория, синхронизируя локальную копию с актуальной. Не сливает данные, просто скачивает

git pull - скачивает изменения из удаленной ветки и мерджит их с локальной веткой

git fakeTeamwork {branchname} <n> - иммитирует коммит в удаленном репозитории с указанием ветки и кол-вом добавляемых коммитов

git push - загрузка локальных изменений в удалённый репозиторий

git pull --rebase - аналог совместно вызванных fetch и rebase

git checkout -b {featureBranch} o/main - создает ветку и указывает следить за origin/main

git branch -u o/main {branchName} - указываем ветке следить за o/main, можно без имени ветки если уже стоим на ней

git push origin main - переходим в ветку main в локальном репозитории,
берём все коммиты и переходим на ветку main на удаленном репозитории origin, затем копируем туда отсутствующие коммиты

git push origin {источник}:{получатель} - запушить коммиты из локальной ветки (источник) в ветку (получатель) на удалённом репозитории

git push origin foo^:main 

git push origin main:newBranch - создание ветки на удаленном репозитории и пуш новых коммитов туда

git fetch origin foo - обратиться к удаленной ветке foo, собрать коммиты которых нет локально,
затем поместить в локальную ветку origin/foo

git fetch origin foo~1:bar - обратиться к удаленной ветке foo на коммит выше HEAD и переместить 
коммиты в локальную ветку bar

git fetch без аргументов - скачать все коммиты с удаленного репозитория в соответствующие локальные ветки

git push origin :feature - удалить ветку на которую делаем пуш с пустым аргументом "источник"

git fetch origin :feature - создает локальную ветку при попытке притянуть изменения из "ничего" 

git pull origin main:foo - создает локальную ветку foo, скачивает изменения из удаленного main, 
затем сливает с веткой на которой мы находились